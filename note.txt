-> create folder FOOD-DELIVERY-APP
-> cd FOOD-DELIVERY-APP

Frontend:
1. Creating react app
-> npx create-react-app frontend
-> delete unnecessary code and files -> logo.svg
2. Linking bootstrap to our app for styling
-> using bootstrap for styling
   inserted bootstrap link (<link href="https://cdn.jsdelivr.net/npm/bootstrap-dark-5@1.1.3/dist/css/bootstrap-dark.min.css" rel="stylesheet">)
   inside frontend -> public -> index.html (inserted bootstrap link in head section above title)
   for adding bootstrap we have to write className as class is a reserve keyword in javascript
-> npm i bootstrap-dark-5 boostrap
   import boostrap in App.js
3. creating files for components and pages:
-> inside src create folder components(reusable piece of code) then create file Navbar.js, Footer.js 
-> inside src create folder screens(contains pages) then create file Home.js, Login.js
-> import Navbar and Footer inside Home.js then in return statement first call Navbar then home page code then call Footer
4. importing Router, Routes, Route from react-router-dom: (As react is single page application)
-> run command (npm i react-router-dom) in frontend terminal
-> import {} from "react-router-dom" in App.js
-> wrap parent div with Router inside App.js then inside div everything is wrap with Routes then inside Routes we need to use Route and provide exact path for elements to render and provide element like Home page, Login page, Signup page, MyOrder page
-> go to Navbar.js import {Link, useNavigate} from "react-router-dom" then use Link as a tag for navigating to other page instead of anchor tag as using this page will not reload while using anchor tag page will reload
5. using online font family
-> insert the link of web font in index.html inside head below bootstrap link
-> inside index.css add font-family and mark it as important
6. Create file Card.js inside components
-> write the code for the Card containing food - image, name, quantity, size, price and option to Add to Cart
-> now call the card inside Home.js before Footer
7. code for Footer.js
-> take the code of Footer from bootstrap 5 website and do necessary changes in it
8. create file Carousel.js inside components
-> take the code of Carousel from bootstrap 5 website and do necessary changes like change class to className, close all image tag (<img/>) and image source
-> Add search bar, copy search bar code from boostrap and do necessary changes (add z-index property to make search bar visible)
-> add Carousel component to Home.js after Navbar component

Backend:
1. sign in to mongodb atlas
-> create project goFood then create database test
2. make file goFoodMERN.food_items.json and goFoodMERN.foodCategory.json 
-> upload these two files to test database using command line
-> go to goFood then click cmd Line tools and copy the code of data import and export 
-> make changes to the url like Password, database name, collection name and add file path in double quotes and file type as json array
-> now go to test database collection you will see the files
3. create folder backend
-> cd backend then npm init 
-> npm install express nodemon mongoose
-> go to package.json and add script start as nodemon index.js
4.create file index.js
-> create server using express 
5. create file db.js
-> write code for connecting our application with database export it and then import in index.js
6. create folder models
-> create file User.js inside models
-> inside User.js create schema for User (new User signup)
7. create folder Routes 
-> create file Auth.js and require it inside index.js
-> inside Auth.js fetch new user detail form request body
-> apply validation on user detail

Frontend:
1. go to src/screens
-> create file Signup.js and Login.js
-> add Navbar component for both pages
-> go to components/Navbar.js and add link of Signup page
-> copy the code of signup form from boostrap 5 and paste it inside Signup.js and do necessary changes
-> go to App.js and provide Route for Signup page
-> in Signup.js create a function handleSubmit for form, handleClick for submit button and onChange for every input field
-> after submit button add a button for existing user and link it with login page
-> complete code for function handleSubmit
-> complete code for function onChange
-> complete code for function handleClick
-> Check user is not existing then storing data of new user inside collection users and navigating to login page else alert for entering valid credentials 
-> write code for Login form inside screens/Login.js
-> handleSubmit if user credentials is matching with any users data persent inside users collection than navigate to home page else send alert for entering valid credentials

Backend:
1. storing Password securely
-> using bcrypt in Routes/Auth.js
2. fetch data
-> inside db.js write code to fetch data food_items and categories

Frontend:
1. display data as Card
-> go to Home.js loadData and provide path for foodData and display it after Carousel
2. Navbar logic
-> go to Navbar.js anf give option of Logout and  cart for loged in user else display Login or Signup button
-> write code for handleLogout (navigate user to login page)
3. Add food items to cart
-> go to Card.js and add button Add to Cart
-> create file ContextReducer.js
-> inside Home.js import ContextReducer
-> go to Card.js and dispatch the user action
4. create file Cart.js inside screens
-> display the items which is added to Cart
-> on clicking chekout save the data to database

Backend:
1. clicking Checkout button in Cart page
-> go to models and create file Orders.js 
-> define schema for the orders
-> store all order data inside collection orders

Backend:
1. Orders data
-> write code in Auth.js to fetch Order data for specific email id 

Frontend:
1. MyOrder.js
-> add Navbar and Footer components inside MyOrder.js
-> between Navbar and Footer, write code for displaying Order data 
-> add Route for MyOrder inside App.js

To Run:
-> cd frontend then npm start
-> cd backend then npm start