MERN -> MongoDB, Express, React, Node (four key technology that makes easier and faster deployment of full stack web application)
MongoDB -> NoSQL database
Express -> Node.js web framework
React -> javascript library for building user interfaces
Node -> javascript runtime envorinment

1. Create folder -> GoFood
open terminal -> cd GoFood
npx create-react-app mernapp
cd mernapp
npm start
delete unnecessary files & code -> logo.svg
insert bootstrap link in index.html above title
create folder components,screens inside src folder 
create file inside components -> Navbar.js, Footer.js
create file inside screens -> Home.js
Navbar.js -> paste the code of navbar from bootdtrap 5 website, replace class by className(ctlr+shift+L)

React Router DOM : 
-> run command (npm i react-router-dom) in mernapp terminal
-> import {} from "react-router-dom" in App.js
-> wrap parent div with Router inside App.js
-> go to Navbar.js import {Link} from "react-router-dom"
-> replace anchor tag with Link in Navbar.js As because of anchor tag page is reloading
-> now page is not reloading

inside screens make file Login.js then add route of Login.js in App.js

now do some changes in navbar to appear it beautiful.

copy the code of card from bootdtrap and paste it inside new component Card.js
modify the code of card to appear it beautiful

copy the code of footer from bootstrap website and paste it in Footer.js and do necessary modification

copy the code of crousel from bootstrap 5 and paste it new component Crousel.js and do necessary modification

call Crousel component in Home.js before Card and after Navbar

inside terminal mernapp -> npm i bootstrap-dark-5 bootstrap react-bootstrap
now import bootstrap in App.js

copy the code of search bar from bootstrap website and add it in Crousel.js

Download MongoDB and add path to environment variables

Using MongoDB Atlas -> first singin with goggle
-> give name of project goFood
-> build a database, select free version
-> Username: goFood, Password: goFood
-> go to network access and add IP address select allow access from anywhere
-> go to database click on cluster then go to collection and create database
-> Database name: goFoodMERN, collection name: sample
-> cluster - cmd line tools and copy data import content
-> first type mongod in cmd then minimise it and open new cmd 
mongoimport --uri mongodb+srv://goFood:goFood@cluster0.yw1q9gw.mongodb.net/goFoodMERN --collection food_items --jsonArray --file "D:\github repository clone\Food-Delivery-App\GoFood\mernapp\foodData2.json"
-> now food_items added to cluster in mongodb atlas
-> similarly import foodCategory.json file

Create folder backend inside mernapp
-> cd backend then run command (npm init) then (npm install express nodemon mongoose)
-> create file index.js inside backend
-> copy the code of express js from its website and paste it in index.js file
-> run command (nodemon index.js) inside backend 
(on writing nodemon then if we do any changes in code its get deploy on server without restarting the server)

connecting mongodb with backend
-> create file db.js inside backend
-> require mongoose in db.js
-> go to atlas then connect then connect your application copy code and then paste that code inside db.js in variable mongoURI
-> do necessary changes in code